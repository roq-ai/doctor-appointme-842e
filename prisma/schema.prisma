generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model appointment {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String   @db.Uuid
  clinic_id        String   @db.Uuid
  appointment_date DateTime @db.Timestamp(6)
  appointment_time String   @db.VarChar(255)
  status           String   @db.VarChar(255)
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  clinic           clinic   @relation(fields: [clinic_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model clinic {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description         String?               @db.VarChar(255)
  location            String?               @db.VarChar(255)
  working_hours       String?               @db.VarChar(255)
  speciality          String?               @db.VarChar(255)
  name                String                @db.VarChar(255)
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  updated_at          DateTime              @default(now()) @db.Timestamp(6)
  user_id             String                @db.Uuid
  tenant_id           String                @db.VarChar(255)
  appointment         appointment[]
  user                user                  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  health_record       health_record[]
  healthcare_provider healthcare_provider[]
}

model health_record {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String   @db.Uuid
  clinic_id     String   @db.Uuid
  diagnosis     String   @db.VarChar(255)
  prescription  String?  @db.VarChar(255)
  notes         String?  @db.VarChar(255)
  date_of_visit DateTime @db.Timestamp(6)
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
  clinic        clinic   @relation(fields: [clinic_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model healthcare_provider {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String   @db.Uuid
  clinic_id      String   @db.Uuid
  qualification  String   @db.VarChar(255)
  experience     Int?
  specialization String   @db.VarChar(255)
  working_days   String   @db.VarChar(255)
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  clinic         clinic   @relation(fields: [clinic_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model system_administrator {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String    @db.Uuid
  access_level   Int
  last_login     DateTime? @db.Timestamp(6)
  login_attempts Int?
  account_status String    @db.VarChar(255)
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  updated_at     DateTime  @default(now()) @db.Timestamp(6)
  user           user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                String                 @unique @db.VarChar(255)
  firstName            String?                @db.VarChar(255)
  lastName             String?                @db.VarChar(255)
  roq_user_id          String                 @db.VarChar(255)
  tenant_id            String                 @db.VarChar(255)
  created_at           DateTime               @default(now()) @db.Timestamp(6)
  updated_at           DateTime               @default(now()) @db.Timestamp(6)
  appointment          appointment[]
  clinic               clinic[]
  health_record        health_record[]
  healthcare_provider  healthcare_provider[]
  system_administrator system_administrator[]
}
